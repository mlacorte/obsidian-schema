@top MarkdownDoc { ("%{" Schema "}" | Markdown)* }
@top SchemaDoc { block }

Markdown { unknown }
Schema { block }

block { listOf<property> }

expression {
  value | postfixExpression | mathExpression |
  comparisonExpression | logicalExpression  |
  Not { "!" expression } |
  LocalProperty "," expression |
  "(" expression ~lambdaOrParen ")"
}

value {
  Identifier | Bool | Null | Number | String | Link | EmbedLink |
  Tag | Date | Duration | Object | Array | Lambda
}

@precedence { postfix @left, mulDiv @left, plsMin @left, cmp @left, logic @left }

postfixExpression {
  Call { expression !postfix "(" listOf<expression | Of | Include> ")" } |
  Index { expression !postfix "[" expression "]" } |
  Dot { expression !postfix "." DotIdentifier { identifier } }
}

mathExpression {
  Multiply { expression !mulDiv "*" expression } |
  Divide { expression !mulDiv divideOp expression } |
  Plus { expression !plsMin "+" expression } |
  Minus { expression !plsMin "-" expression }
}

comparisonExpression {
  Gte { expression !cmp ">=" expression } |
  Lte { expression !cmp "<=" expression } |
  Neq { expression !cmp "!=" expression } |
  Gt { expression !cmp ">" expression } |
  Lt { expression !cmp "<" expression } |
  Eq { expression !cmp "=" expression }
}

logicalExpression {
  And { expression !logic ("and" | "&") expression } |
  Or { expression !logic ("or" | "|") expression }
}

Identifier { identifier }
Date { "date(" ( DateLiteral | DateShorthand) ")" }
Duration { "dur(" durationPair (","? durationPair)* ")" }

Lambda { "(" LambdaArgs ~lambdaOrParen ")" "=>" LambdaExpr }
LambdaArgs { listOf<Arg | TypedArg> }
LambdaExpr { expression }
Arg { Identifier }
TypedArg { Identifier ":" expression }

Array  { "[" listOf<expression | Of | Include> "]" }
Object { "{" listOf<property> "}" }
Property { kw<"override">? propertyKey ":" expression }
PropertyIdentifier { identifier }

property { Of | Include | LocalProperty | Property }
propertyKey {
  PropertyIdentifier |
  String |
  kw<"protected">? Tag |
  kw<"protected">? Link
}
Of { kw<"of"> expression }
Include { kw<"include"> expression }
LocalProperty { kw<"local"> propertyKey ":" expression }

durationPair {
  DurationYears { Number ("year" | "years" | "yr" | "yrs") } |
  DurationMonths { Number ("month" | "months" | "mo" | "mos") } |
  DurationWeeks { Number ("week" | "weeks" | "wk" | "wks" | "w") } |
  DurationDays { Number ("day" | "days" | "d") } |
  DurationHours { Number ("hour" | "hours" | "hr" | "hrs" | "h") } |
  DurationMinutes { Number ("minute" | "minutes" | "min" | "mins" | "m") } |
  DurationSeconds { Number ("second" | "seconds" | "sec" | "secs" | "s") }
}

@external tokens unknownTokenizer from "./schema.tokens" { unknown }

@tokens {
  Number { "-"? $[0-9]+ ("." $[0-9]+)? }
  Bool { "true" | "false" | "True" | "False" }
  Link { "[[" ![\[\]]* "]]" }
  EmbedLink { "![[" ![\[\]]* "]]" }
  Null { "null" }
  Tag { "#" ![\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~\[\]\\ \t\r\n\v\f]* }
  DateShorthand {
    "now" | "today" | "yesterday" | "tomorrow" |
    "sow" | "eow" | "soy" | "eoy" | "som" | "eom"
  }
  DateLiteral {
    @digit @digit @digit @digit "-" @digit @digit (
      "-" @digit @digit (
      "T" @digit @digit (
      ":" @digit @digit (
      ":" @digit @digit (
      "." @digit @digit @digit
    )?)?)?)?)?
  }
  escape[@name="\\"] { "\\" _ }
  stringContent { ![\\"]+ }
  divideOp[@name="/"] { "/" }
  lineComment[@name="//"] { "//" ![\n]* }
  whitespace { @whitespace }
  @precedence { lineComment, divideOp }

  "%{" "}" "!" "(" ")" "," "[" "]" "." "*" "/" "+" "-"
  ">=" "<=" "!=" ">" "<" "=" "and" "&" "or" "|" "=>" "{" ":"
}

@skip {} {
  String { '"' (escape | stringContent)* '"' }
  blockComment[@name="/*"] { "/*" blockCommentChar* blockCommentStop }
}

@local tokens {
  blockCommentStop { "*/" }
  @else blockCommentChar
}

@external tokens identifierTokenizer from "./schema.tokens" { identifier }

@skip { whitespace | lineComment | blockComment }

listOf<term> { (term ("," term)* ","?)? }
kw<term> { @specialize[@name={term}]<identifier, term> }

@detectDelim