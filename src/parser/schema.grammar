@top MarkdownDoc { (Markdown | schemaBlock | dataBlock)* }
@top SchemaDoc { block }

Markdown { unknown }

Schema { block }
schemaBlock { schemaDelim Schema schemaDelim }

Data { block }
dataBlock { dataDelim Data dataDelim }

block { listOf<Property> }
expression { value | binaryExpression | "(" expression ~lambdaOrParen ")" }
value { Identifier | Bool | Null | Number | String | Link | EmbedLink | Tag | Object | Array | Lambda }

Array  { "[" listOf<expression> "]" }
Object { "{" listOf<Property> "}" }
Property { (String | Tag | Link | Identifier) ":" expression }

Lambda { "(" LambdaArgs ~lambdaOrParen ")" "=>" LambdaExpr }
LambdaArgs { listOf<Arg | TypedArg> }
LambdaExpr { expression }
Arg { Identifier }
TypedArg { Identifier ":" expression }

@precedence { mulDiv @left, plsMin @left, cmp @left, bool @left }

binaryExpression {
  Multiply { expression !mulDiv "*" expression } |
  Divide { expression !mulDiv "/" expression } |
  Plus { expression !plsMin "+" expression } |
  Minus { expression !plsMin "-" expression } |
  Gte { expression !cmp ">=" expression } |
  Lte { expression !cmp "<=" expression } |
  Neq { expression !cmp "!=" expression } |
  Gt { expression !cmp ">" expression } |
  Lt { expression !cmp "<" expression } |
  Eq { expression !cmp "=" expression } |
  And { expression !bool ("and" | "&") expression } |
  Or { expression !bool ("or" | "|") expression }
}

@tokens {
  Number { "-"? $[0-9]+ ("." $[0-9]+)? }
  String { '"' ("\\" _ | !["\\])* '"' }
  Bool { "true" | "false" | "True" | "False" }
  Link { "[[" ![\[\]]* "]]" }
  EmbedLink { "![[" ![\[\]]* "]]" }
  Null { "null" }
  whitespace { @whitespace }
}

Tag { tag }
Identifier { identifier }

@external tokens schemaDelimTokenizer from "./schema.tokens" { schemaDelim }
@external tokens dataDelimTokenizer from "./schema.tokens" { dataDelim }
@external tokens unknownTokenizer from "./schema.tokens" { unknown }
@external tokens tagTokenizer from "./schema.tokens" { tag }
@external tokens identifierTokenizer from "./schema.tokens" { identifier }

@skip { whitespace }
listOf<item> { (item ("," item)*)? }

@detectDelim