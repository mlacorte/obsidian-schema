@top MarkdownDoc { (SchemaBlock | MarkdownBlock)* }
@top SchemaDoc { Block }

MarkdownBlock { unknown }
SchemaBlock { "%{" Block "}" }

expression {
  value | postfixExpression | mathExpression |
  comparisonExpression | logicalExpression  |
  Not | LocalExpression | Parens
}

Not { "!" expression }
LocalExpression { kw<"local"> propertyKey ":" expression "," expression }
Parens { "(" expression ~lambdaOrParen ")" }

value {
  Identifier | Bool | Null | Number | String | Link | EmbedLink |
  Tag | Date | Duration | Object | Array | Lambda
}

@precedence { postfix @left, mulDiv @left, plsMin @left, cmp @left, logic @left }

Call { expression !postfix "(" listOf<expression> ")" }
Index { expression !postfix "[" expression "]" }
Dot { expression !postfix "." DotIdentifier }
DotIdentifier { identifier }
postfixExpression { Call  | Index  | Dot }

Multiply { expression !mulDiv "*" expression }
Divide { expression !mulDiv divideOp expression }
Plus { expression !plsMin "+" expression }
Minus { expression !plsMin "-" expression }
mathExpression { Multiply | Divide | Plus | Minus }

Gte { expression !cmp ">=" expression }
Lte { expression !cmp "<=" expression }
Neq { expression !cmp "!=" expression }
Gt { expression !cmp ">" expression }
Lt { expression !cmp "<" expression }
Eq { expression !cmp "=" expression }
comparisonExpression { Gte | Lte | Neq | Gt | Lt | Eq }

And { expression !logic "and" expression }
Or { expression !logic "or" expression }
logicalExpression { And | Or }

Identifier { kw<"this"> | identifier }
Date { "date(" ( DateLiteral | DateShorthand) ")" }
Duration { "dur(" durationPair (","? durationPair)* ")" }

Lambda { "(" LambdaArgs ~lambdaOrParen ")" "=>" LambdaExpr }
LambdaArgs { listOf<Arg | TypedArg> }
LambdaExpr { expression }
Arg { Identifier }
TypedArg { Identifier ":" expression }

Array { "[" listOf<item | OverrideItem> "]" }
item { Of | expression }
OverrideItem { kw<"override"> item }

Object { "{" Block "}" }
Property { propertyKey ":" expression }
PropertyIdentifier { identifier }

Block { listOf<property | OverrideProperty> }
OverrideProperty { kw<"override"> property }
property { Of | Include | LocalProperty | Property }
propertyKey {
  PropertyIdentifier |
  String |
  Protected |
  Tag |
  Link
}
Of { kw<"of"> expression }
Include { kw<"include"> expression }
LocalProperty { kw<"local"> propertyKey ":" expression }
Protected { kw<"protected"> (Tag | Link) }

DurationYears { Number ("year" | "years" | "yr" | "yrs") }
DurationMonths { Number ("month" | "months" | "mo" | "mos") }
DurationWeeks { Number ("week" | "weeks" | "wk" | "wks" | "w") }
DurationDays { Number ("day" | "days" | "d") }
DurationHours { Number ("hour" | "hours" | "hr" | "hrs" | "h") }
DurationMinutes { Number ("minute" | "minutes" | "min" | "mins" | "m") }
DurationSeconds { Number ("second" | "seconds" | "sec" | "secs" | "s") }
durationPair {
  DurationYears | DurationMonths | DurationWeeks | DurationDays |
  DurationHours | DurationMinutes | DurationSeconds
}

@external tokens unknownTokenizer from "./schema.tokens" { unknown }

@tokens {
  Number { "-"? $[0-9]+ ("." $[0-9]+)? }
  Bool { "true" | "false" | "True" | "False" }
  Link { "[[" ![\[\]]* "]]" }
  EmbedLink { "![[" ![\[\]]* "]]" }
  Null { "null" }
  Tag { "#" ![\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~\[\]\\ \t\r\n\v\f]* }
  DateShorthand {
    "now" | "today" | "yesterday" | "tomorrow" |
    "sow" | "eow" | "soy" | "eoy" | "som" | "eom"
  }
  DateLiteral {
    @digit @digit @digit @digit "-" @digit @digit (
      "-" @digit @digit (
      "T" @digit @digit (
      ":" @digit @digit (
      ":" @digit @digit (
      "." @digit @digit @digit
    )?)?)?)?)?
  }
  escape[@name="\\"] { "\\" _ }
  stringContent { ![\\"]+ }
  divideOp[@name="/"] { "/" }
  lineComment[@name="//"] { "//" ![\n]* }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }
  whitespace { @whitespace }
  @precedence { lineComment, divideOp }

  "%{" "}" "!" "(" ")" "," "[" "]" "." "*" "/" "+" "-"
  ">=" "<=" "!=" ">" "<" "=" "and" "&" "or" "|" "=>" "{" ":"
}

@skip {} {
  String { '"' (escape | stringContent)* '"' }
  blockComment[@name="/*"] { "/*" blockCommentRest }
}

@external tokens identifierTokenizer from "./schema.tokens" { identifier }

@skip { whitespace | lineComment | blockComment }

listOf<term> { (term ("," term)* ","?)? }
kw<term> { @specialize[@name={term}]<identifier, term> }

@external propSource highlight from "./schema.highlight"

@detectDelim